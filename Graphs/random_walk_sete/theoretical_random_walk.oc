
file_path = '1adjacency_matrix.txt';
adj_matrix = dlmread(file_path);

n = size(adj_matrix, 1);
m = sum(sum(adj_matrix)) / 2;

degree_matrix = sum(adj_matrix, 2); % Определение переменной degrees

degrees = diag(degree_matrix);

laplacian_matrix = degrees - adj_matrix;

[eigenvectors, eigenvalues_matrix] = eig(laplacian_matrix);

eigenvalues = diag(eigenvalues_matrix);

eigenvalues_nonzero = eigenvalues(2:end);
eigenvectors_nonzero = eigenvectors(:, 2:end);

H = zeros(n, n);

max_iter = 20000;
tol = 1e-16;

for iteration = 1:max_iter
    H_prev = H;
    for u = 1:n
        for v = 1:n
            if u ~= v
                H(u, v) = 1 + (1 / degree_matrix(u)) * sum(H(adj_matrix(u, :) == 1, v));
            else
                H(u, v) = 0;
            end
        end
    end

    if mod(iteration, 1) == 0
        fprintf('Iteration %d, max change: %e\n', iteration, max(max(abs(H - H_prev))));
    end

    if max(max(abs(H - H_prev))) < tol
        break;
    end
end

i = 1;
j = 14;

H_ij = H(i, j);

R_ij = sum((eigenvectors_nonzero(i, :) - eigenvectors_nonzero(j, :)).^2 ./ eigenvalues_nonzero');

C_ij = 2 * m * R_ij;

fprintf('Среднее время прохода из вершины %d в вершину %d: %f.\n', i, j, H_ij);
fprintf('Среднее время прохода из вершины %d в вершину %d и обратно: %f.\n', i, j, C_ij);
fprintf('Эффективное сопротивление: %f.\n', R_ij);
